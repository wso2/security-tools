#X-Generator: crowdin.com
# ascanalphaAlpha 
#
# This file defines the default (English) variants of all of the internationalised messages
ascanalpha.desc=Active Scan Rules - alpha

ascanalpha.cookieslack.name=Cookie Slack Detector
ascanalpha.cookieslack.desc=Repeated GET requests\: drop a different cookie each time, followed by normal request with all cookies to stabilize session, compare responses against original baseline GET. This can reveal areas where cookie based authentication/attributes are not actually enforced.
ascanalpha.cookieslack.solution=N.a.
ascanalpha.cookieslack.otherinfo.intro=Cookies that don't have expected effects can reveal flaws in application logic. In the worst case, this can reveal where authentication via cookie token(s) is not actually enforced.\n
ascanalpha.cookieslack.session.warning=NOTE\: Because of its name this cookie may be important, but dropping it appears to have no effect\: [{0}] \n
ascanalpha.cookieslack.affect.response.yes=These cookies affected the response\: 
ascanalpha.cookieslack.affect.response.no=These cookies did NOT affect the response\: 
ascanalpha.cookieslack.session.destroyed=Dropping this cookie appears to have invalidated the session\: [{0}] A follow-on request with all original cookies still had a different response than the original request. \n
ascanalpha.cookieslack.separator=,
ascanalpha.cookieslack.endline=\n

ascanalpha.elinjection.name=Injection d'Expression Language
ascanalpha.elinjection.desc=Le logiciel construit tout ou partie d'une instruction expression language (EL) dans une page Java Server Page (JSP) \u00e0 l'aide d'une entr\u00e9e manipul\u00e9e re\u00e7ue d'un composant en amont, mais il ne neutralise pas ou neutralise incorrectement des \u00e9l\u00e9ments sp\u00e9ciaux qui pourraient modifier l'instruction EL avant son ex\u00e9cution. Dans certaines versions ant\u00e9rieures \u00e0 Spring 3.0.5, il y avait une vuln\u00e9rabilit\u00e9 (CVE-2011-2730) dans laquelle des balises d'Expression Language seraient \u00e9valu\u00e9es deux fois, ce qui exposait effectivement n'importe quelle application \u00e0 l'injection de EL. Cependant, cette faiblesse est toujours possible pour certaines configurations, m\u00eame pour les versions ult\u00e9rieures.
ascanalpha.elinjection.soln=Effectuez une validation de donn\u00e9es sur toute entr\u00e9e non fiable et assurez-vous qu'un codage de sortie est appliqu\u00e9 lorsque les donn\u00e9es arrivent sur la couche EL, afin qu'aucun m\u00e9tacaract\u00e8re ne soit trouv\u00e9  dans le contenu de l'utilisateur avant l'\u00e9valuation par l'interpr\u00e9teur. Les patterns les plus \u00e9vidents \u00e0 d\u00e9tecter comprennent ${ et \#{, mais il peut \u00eatre possible d'encoder ou de fragmenter ces donn\u00e9es.
ascanalpha.elinjection.refs=https\://www.owasp.org/index.php/Expression_Language_Injection\nhttp\://cwe.mitre.org/data/definitions/917.html

ascanalpha.examplefile.name=An example active scan rule which loads data from a file
ascanalpha.examplefile.desc=Add more information about the vulnerability here
ascanalpha.examplefile.other=This is for information that doesnt fit in any of the other sections
ascanalpha.examplefile.soln=A general description of how to solve the problem
ascanalpha.examplefile.refs=http\://zaproxy.blogspot.co.uk/2014/04/hacking-zap-4-active-scan-rules.html

ascanalpha.httpsashttpscanner.name=Du contenu HTTPS est disponible via HTTP
ascanalpha.httpsashttpscanner.desc=Du contenu initialement accessible via HTTPS (c'est-\u00e0-dire\: \u00e0 l'aide de chiffrement  SSL/TLS) est \u00e9galement accessible via HTTP (sans chiffrement). 
ascanalpha.httpsashttpscanner.soln=Assurez vous que votre serveur web, serveur d'applications, \u00e9quilibreur de charge, etc. est configur\u00e9 pour servir seulement du contenu via HTTPS. Envisagez d'impl\u00e9menter HTTP Strict Transport Security.
ascanalpha.httpsashttpscanner.refs=https\://www.owasp.org/index.php/HTTP_Strict_Transport_Security\nhttps\://www.owasp.org/index.php/List_of_useful_HTTP_headers\nhttp\://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp\://caniuse.com/stricttransportsecurity\nhttp\://tools.ietf.org/html/rfc6797

ascanalpha.integeroverflow.name=Integer Overflow Error
ascanalpha.integeroverflow.desc=An integer overflow condition exists when an integer, which has not been properly checked from the input stream is used within a compiled program. 
ascanalpha.integeroverflow.soln=Rewrite the background program using proper checking of the size of integer being input to prevent overflows and divide by 0 errors.  This will require a recompile of the background executable.
ascanalpha.integeroverflow.refs=https\://www.owasp.org/index.php/Integer_overflow and http\://projects.webappsec.org/w/page/13246946/Integer%20Overflows.
ascanalpha.integeroverflow.error1=Potential Integer Overflow.  Status code changed on the input of a long string of random integers.
ascanalpha.integeroverflow.error2=Potential Integer Overflow.  Status code changed on the input of a long string of zeros.
ascanalpha.integeroverflow.error3=Potential Integer Overflow.  Status code changed on the input of a long string of ones.
ascanalpha.integeroverflow.error4=Potential Integer Overflow.  Status code changed on the input of a long string of nines.

ascanalpha.proxydisclosure.name=Proxy Disclosure
ascanalpha.proxydisclosure.desc={0} proxy server(s) were detected or fingerprinted. This information helps a potential attacker to determine \n - A list of targets for an attack against the application.\n - Potential vulnerabilities on the proxy servers that service the application.\n - The presence or absence of any proxy-based components that might cause attacks against the application to be detected, prevented, or mitigated. 
ascanalpha.proxydisclosure.soln=Disable the 'TRACE' method on the proxy servers, as well as the origin web/application server.\nDisable the 'OPTIONS' method on the proxy servers, as well as the origin web/application server, if it is not required for other purposes, such as 'CORS' (Cross Origin Resource Sharing).\nConfigure the web and application servers with custom error pages, to prevent 'fingerprintable' product-specific error pages being leaked to the user in the event of HTTP errors, such as 'TRACK' requests for non-existent pages.\nConfigure all proxies, application servers, and web servers to prevent disclosure of the technology and version information in the 'Server' and 'X-Powered-By' HTTP response headers.\n
ascanalpha.proxydisclosure.refs=???
ascanalpha.proxydisclosure.attack=TRACE, OPTIONS methods with 'Max-Forwards' header. TRACK method.
ascanalpha.proxydisclosure.extrainfo.unknown=Inconnu
ascanalpha.proxydisclosure.extrainfo.proxyserver.header=Using the TRACE, OPTIONS, and TRACK methods, the following proxy servers have been identified between OWASP ZAP and the application/web server\: 
ascanalpha.proxydisclosure.extrainfo.proxyserver=- {0}
ascanalpha.proxydisclosure.extrainfo.webserver.header=The following web/application server has been identified\: 
ascanalpha.proxydisclosure.extrainfo.webserver=- {0}
ascanalpha.proxydisclosure.extrainfo.silentproxyserver.header=The following 'silent' proxy servers were identified. Due to their behaviour, it is not known at which point in the network topology these proxy servers reside\:
ascanalpha.proxydisclosure.extrainfo.silentproxyserver=- {0}
ascanalpha.proxydisclosure.extrainfo.traceenabled=The 'TRACE' method is enabled on one or more of the proxy servers, or on the origin server. This method leaks all information submitted from the web browser and proxies back to the user agent. This may facilitate 'Cross Site Tracing' attacks. 

ascanalpha.relativepathconfusion.name=Relative Path Confusion
ascanalpha.relativepathconfusion.desc=The web server is configured to serve responses to ambiguous URLs in a manner that is likely to lead to confusion about the correct "relative path" for the URL. Resources (CSS, images, etc) are also specified in the page response using relative, rather than absolute URLs. In an attack, if the web browser parses the "cross-content" response in a permissive manner, or can be tricked into permissively parsing the "cross-content" response, using techniques such as framing, then the web browser may be fooled into interpreting HTML as CSS (or other content types), leading to an XSS vulnerability.
ascanalpha.relativepathconfusion.soln=Web servers and frameworks should be updated to be configured to not serve responses to ambiguous URLs in such a way that the relative path of such URLs could be mis-interpreted by components on either the client side, or server side.\nWithin the application, the correct use of the "<base>" HTML tag in the HTTP response will unambiguously specify the base URL for all relative URLs in the document.\nUse the "Content-Type" HTTP response header to make it harder for the attacker to force the web browser to mis-interpret the content type of the response.\nUse the "X-Content-Type-Options\: nosniff" HTTP response header to prevent the web browser from "sniffing" the content type of the response.\nUse a modern DOCTYPE such as "<\!doctype html>" to prevent the page from being rendered in the web browser using "Quirks Mode", since this results in the content type being ignored by the web browser.\nSpecify the "X-Frame-Options" HTTP response header to prevent Quirks Mode from being enabled in the web browser using framing attacks. 
ascanalpha.relativepathconfusion.refs=http\://www.thespanner.co.uk/2014/03/21/rpo/\nhttps\://hsivonen.fi/doctype/\nhttp\://www.w3schools.com/tags/tag_base.asp
ascanalpha.relativepathconfusion.extrainfo.morethanonebasetag=More than one <base> tag was specified in the HTML <head> tag to define the location for relative URLs, which is not valid.
ascanalpha.relativepathconfusion.extrainfo.nobasetag=No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.
ascanalpha.relativepathconfusion.extrainfo.contenttypeenabled=A Content Type of "{0}" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  
ascanalpha.relativepathconfusion.extrainfo.quirksmodeenabledexplicitly=Quirks Mode is explicitly enabled via <meta http-equiv\="{0}", allowing the specified Content Type to be bypassed.
ascanalpha.relativepathconfusion.extrainfo.quirksmodeenabledimplicitly=Quirks Mode is implicitly enabled via the use of an old DOCTYPE with PUBLIC id "{0}", allowing the specified Content Type to be bypassed in some web browsers.
ascanalpha.relativepathconfusion.extrainfo.quirksmodeenabledimplicitlynodoctype=Quirks Mode is implicitly enabled via the absence of a DOCTYPE, allowing the specified Content Type to be bypassed.
ascanalpha.relativepathconfusion.extrainfo.nocontenttype=No Content Type was specified, so Quirks Mode is not required to exploit the vulnerability in the web browser. 
ascanalpha.relativepathconfusion.extrainfo.framingallowed=No X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed.

ascanalpha.sourcecodedisclosure.desc=Le code source de la page actuelle a \u00e9t\u00e9 d\u00e9voil\u00e9 par le serveur internet
ascanalpha.sourcecodedisclosure.lfibased.name=Fuite de code source via inclusion de fichier
ascanalpha.sourcecodedisclosure.lfibased.soln=Ensure that arbitrary files specified by the user are not included in the output
ascanalpha.sourcecodedisclosure.lfibased.extrainfo=The output for the source code filename [{0}] differs sufficiently from that of the random parameter [{1}], at [{2}%], compared to a threshold of [{3}%]
ascanalpha.sourcecodedisclosure.lfibased.evidence=\ 

ascanalpha.sourcecodedisclosure.gitbased.name=Source Code Disclosure - Git 
ascanalpha.sourcecodedisclosure.gitbased.soln=Ensure that Git metadata files are not deployed to the web server or application server
ascanalpha.sourcecodedisclosure.gitbased.extrainfo=\ 
ascanalpha.sourcecodedisclosure.gitbased.evidence=The source code for [{0}] was extracted using [{1}]

ascanalpha.sqlinjection.sqlite.name=Injection SQL sur SQLite
ascanalpha.sqlinjection.desc=Une injection SQL peut \u00eatre possible
ascanalpha.sqlinjection.soln=Ne faites pas confiance aux entr\u00e9es du c\u00f4t\u00e9 client, m\u00eame si des m\u00e9canismes de validation sont en place c\u00f4t\u00e9 client.\nEn g\u00e9n\u00e9ral, contr\u00f4lez du c\u00f4t\u00e9 serveur le type de chaque donn\u00e9e.\nSi l'application utilise JDBC, utilisez les PreparedStatement ou CallableStatement, avec les param\u00e8tres pass\u00e9s par '?'\nSi l'application utilise ASP, utilisez les Command Objects ADO avec un typage fort et des requ\u00eates param\u00e9tr\u00e9es.\nSi l'utilisation de proc\u00e9dures stock\u00e9es est possible, utilisez-les. \nNe concat\u00e9nez *pas* les cha\u00eenes de caract\u00e8res dans les requ\u00eates \u00e0 destination de proc\u00e9dures stock\u00e9es, ou utilisez des fonctions 'exec', 'exec immediate' ou d'autre fonctions \u00e9quivalentes\!\nNe cr\u00e9ez pas des requ\u00eates SQL dynamiques par simple concat\u00e9nation de cha\u00eenes de caract\u00e8res.\n\u00c9chappez toutes les donn\u00e9es re\u00e7ues du client.\nAppliquez une 'liste blanche' de caract\u00e8res autoris\u00e9s, ou une 'liste noir' de caract\u00e8res interdits dans les entr\u00e9es de l'utilisateur.\nAppliquez le principe de moindre privil\u00e8ge en utilisant le privil\u00e8ge utilisateur le plus faible sur la base de donn\u00e9e.\nEn particulier, \u00e9vitez l'utilisation des utilisateurs 'sa' ou 'db-owner'. Ceci n'\u00e9limine pas les injections SQL, mais minimise leur impact.\nAccordez \u00e0 l'application le minimum n\u00e9cessaire de droits d'acc\u00e8s aux bases de donn\u00e9es .
ascanalpha.sqlinjection.refs=https\://www.owasp.org/index.php/Top_10_2010-A1\nhttps\://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
ascanalpha.sqlinjection.sqlite.alert.timebased.extrainfo=The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, parameter value [{2}], which caused the request to take [{3}] milliseconds, when the original unmodified query with value [{4}] took [{5}] milliseconds.
ascanalpha.sqlinjection.sqlite.alert.errorbased.extrainfo=The following known SQLite error message was provoked\: [{0}].
ascanalpha.sqlinjection.sqlite.alert.versionnumber.extrainfo=Using a UNION based SQL Injection attack, and by exploiting SQLite''s dynamic typing mechanism, the SQLite version was determined to be [{0}].\nWith string-based injection points, full SQLite version information can be extracted, but with numeric injection points, only partial SQLite version information can be extracted.\nMore information on SQLite version [{0}] is available at http\://www.sqlite.org/changes.html

ascanalpha.testuseragent.name=User Agent Fuzzer
ascanalpha.testuseragent.desc=Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.
ascanalpha.testuseragent.refs=https\://www.owasp.org/index.php/Web_Application_Security_Testing_Cheat_Sheet
ascanalpha.testuseragent.useragentparmname=Header User-Agent
